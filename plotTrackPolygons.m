track_checkpoints = model.track.Hockenheim4;epsilon_area_tolerance = .05;close all% 1) tesselation (based on discret track checkpoints)track = controller.SCR.generate_track_polygons.tesselate(track_checkpoints);plotTrackPolygons_(track, 'Track - SCR - 1) Tesselation to Polygons')% 2) merge polygonstrack = controller.SCR.generate_track_polygons.merge_polygons(track, epsilon_area_tolerance);plotTrackPolygons_(track, 'Track - SCR - 2) Merged Polygons')% 3) add overlapstrack = controller.SCR.generate_track_polygons.add_overlaps(track);plotTrackPolygons_(track, 'Track - SCR - 3) Overlapped Polygons')function plotTrackPolygons_(track, name)    figure('Name', name)    axis equal    hold on    % plot every polygon hull    for i = 1:length(track.polygons)        vertices = track.vertices(:, track.polygons(i).vertex_indices);        [K, ~] = convhull(vertices');        vertices = vertices(:, K(:,1));        plot(vertices(1,:), vertices(2,:), '-');    endend